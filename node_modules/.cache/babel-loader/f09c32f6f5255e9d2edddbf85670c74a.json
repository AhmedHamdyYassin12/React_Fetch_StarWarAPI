{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\React\\\\warStarAPI\\\\warStarAPI\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [Movies, setFetchMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [isError, setIsError] = useState(false); //using the useEffect to fetch the data without the need to press the button for the first time.\n\n  useEffect(() => {\n    fetchMovieHandler();\n  }, []); // we can use the async and await way to achieve the same .then method\n\n  async function fetchMovieHandler() {\n    setIsEmpty(false);\n    setIsLoading(true);\n    setIsError(false);\n\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films\");\n\n      if (!response.ok) {\n        throw new Error(\"something is wrong\");\n      }\n\n      const data = await response.json();\n      const transformedMovies = data.results.map(filmData => {\n        return {\n          id: filmData.episode_id,\n          openingText: filmData.opening_crawl,\n          title: filmData.title,\n          releaseDate: filmData.release_date\n        };\n      });\n      setTimeout(() => {\n        setFetchMovie(transformedMovies);\n        setIsLoading(false);\n      }, 1000);\n    } catch (error) {\n      setIsError(error.message);\n      setIsLoading(false);\n    }\n  } /////////////////////////\n  // function fetchMovieHandler() {\n  //   setIsLoading(true);\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       const transformedMovies = data.results.map((filmData) => {\n  //         return {\n  //           id: filmData.episode_id,\n  //           openingText: filmData.opening_crawl,\n  //           title: filmData.title,\n  //           releaseDate: filmData.release_date,\n  //         };\n  //       });\n  //       setFetchMovie(transformedMovies);\n  //     });\n  //   setIsLoading(false);\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMovieHandler,\n        children: \" Fetch Movies \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [isEmpty ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Movies to show...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 20\n      }, this) : \"\", isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: Movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 42\n      }, this), isError ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: isError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 20\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"vqsSVCJjY7Dbh6rQhkWk3s4Jdyw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Programming/React/warStarAPI/warStarAPI/src/App.js"],"names":["React","useState","useEffect","MoviesList","App","Movies","setFetchMovie","isLoading","setIsLoading","isEmpty","setIsEmpty","isError","setIsError","fetchMovieHandler","response","fetch","ok","Error","data","json","transformedMovies","results","map","filmData","id","episode_id","openingText","opening_crawl","title","releaseDate","release_date","setTimeout","error","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAASC,aAAT,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC,CAJa,CAKb;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT,CANa,CASb;;AACA,iBAAeA,iBAAf,GAAmC;AACjCH,IAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAI,IAAAA,UAAU,CAAC,KAAD,CAAV;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;;AAEA,UAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACD,YAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,YAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,QAAD,IAAc;AACvD,eAAO;AACLC,UAAAA,EAAE,EAAED,QAAQ,CAACE,UADR;AAELC,UAAAA,WAAW,EAAEH,QAAQ,CAACI,aAFjB;AAGLC,UAAAA,KAAK,EAAEL,QAAQ,CAACK,KAHX;AAILC,UAAAA,WAAW,EAAEN,QAAQ,CAACO;AAJjB,SAAP;AAMD,OAPyB,CAA1B;AAQAC,MAAAA,UAAU,CAAC,MAAM;AACfzB,QAAAA,aAAa,CAACc,iBAAD,CAAb;AACAZ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAHS,EAGP,IAHO,CAAV;AAID,KAnBD,CAmBE,OAAOwB,KAAP,EAAc;AACdpB,MAAAA,UAAU,CAACoB,KAAK,CAACC,OAAP,CAAV;AACAzB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GArCY,CAsCb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEK,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,iBACGJ,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,GAAiC,EAD3C,EAEGF,SAAS,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAuB,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEF;AAApB;AAAA;AAAA;AAAA;AAAA,cAFnC,EAGGM,OAAO,gBAAG;AAAA,kBAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,cAAH,GAAsB,EAHhC;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAtEQP,G;;KAAAA,G;AAwET,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [Movies, setFetchMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmpty, setIsEmpty] = useState(true);\n  const [isError, setIsError] = useState(false);\n  //using the useEffect to fetch the data without the need to press the button for the first time.\n  useEffect(() => {\n    fetchMovieHandler();\n  }, []);\n  // we can use the async and await way to achieve the same .then method\n  async function fetchMovieHandler() {\n    setIsEmpty(false);\n    setIsLoading(true);\n    setIsError(false);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films\");\n\n      if (!response.ok) {\n        throw new Error(\"something is wrong\");\n      }\n      const data = await response.json();\n      const transformedMovies = data.results.map((filmData) => {\n        return {\n          id: filmData.episode_id,\n          openingText: filmData.opening_crawl,\n          title: filmData.title,\n          releaseDate: filmData.release_date,\n        };\n      });\n      setTimeout(() => {\n        setFetchMovie(transformedMovies);\n        setIsLoading(false);\n      }, 1000);\n    } catch (error) {\n      setIsError(error.message);\n      setIsLoading(false);\n    }\n  }\n  /////////////////////////\n  // function fetchMovieHandler() {\n  //   setIsLoading(true);\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       const transformedMovies = data.results.map((filmData) => {\n  //         return {\n  //           id: filmData.episode_id,\n  //           openingText: filmData.opening_crawl,\n  //           title: filmData.title,\n  //           releaseDate: filmData.release_date,\n  //         };\n  //       });\n  //       setFetchMovie(transformedMovies);\n  //     });\n  //   setIsLoading(false);\n  // }\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}> Fetch Movies </button>\n      </section>\n      <section>\n        {isEmpty ? <p>No Movies to show...</p> : \"\"}\n        {isLoading ? <p>Loading...</p> : <MoviesList movies={Movies} />}\n        {isError ? <p>{isError}</p> : \"\"}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}