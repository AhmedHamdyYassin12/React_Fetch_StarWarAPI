{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\React\\\\warStarAPI\\\\warStarAPI\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [Movies, setFetchMovie] = useState([]);\n  const [isloading, setIsLoading] = useState(false); // we can use the async and await way to achieve the same .then method\n  // async function fetchMovieHandler() {\n  //   const response = await fetch(\"https://swapi.dev/api/films\");\n  //   const data = await response.json();\n  //   const transformedMovies = data.results.map((filmData) => {\n  //     return {\n  //       id: filmData.episode_id,\n  //       openingText: filmData.opening_crawl,\n  //       title: filmData.title,\n  //       releaseDate: filmData.release_date,\n  //     };\n  //   });\n  // }\n\n  function fetchMovieHandler() {\n    setIsLoading(true);\n    fetch(\"https://swapi.dev/api/films\").then(response => {\n      return response.json();\n    }).then(data => {\n      const transformedMovies = data.results.map(filmData => {\n        return {\n          id: filmData.episode_id,\n          openingText: filmData.opening_crawl,\n          title: filmData.title,\n          releaseDate: filmData.release_date\n        };\n      });\n      setFetchMovie(transformedMovies);\n      setIsLoading(false);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMovieHandler,\n        children: \" Fetch Movies \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: Movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+/0Y3lxAnWNwwwZzgBBslNlx7+I=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Programming/React/warStarAPI/warStarAPI/src/App.js"],"names":["React","useState","MoviesList","App","Movies","setFetchMovie","isloading","setIsLoading","fetchMovieHandler","fetch","then","response","json","data","transformedMovies","results","map","filmData","id","episode_id","openingText","opening_crawl","title","releaseDate","release_date"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAASC,aAAT,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C,CAFa,CAGb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAASO,iBAAT,GAA6B;AAC3BD,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,KAAK,CAAC,6BAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAHH,EAIGF,IAJH,CAISG,IAAD,IAAU;AACd,YAAMC,iBAAiB,GAAGD,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAkBC,QAAD,IAAc;AACvD,eAAO;AACLC,UAAAA,EAAE,EAAED,QAAQ,CAACE,UADR;AAELC,UAAAA,WAAW,EAAEH,QAAQ,CAACI,aAFjB;AAGLC,UAAAA,KAAK,EAAEL,QAAQ,CAACK,KAHX;AAILC,UAAAA,WAAW,EAAEN,QAAQ,CAACO;AAJjB,SAAP;AAMD,OAPyB,CAA1B;AAQAnB,MAAAA,aAAa,CAACS,iBAAD,CAAb;AACAP,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAfH;AAgBD;;AACD,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,6BACE,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEJ;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA7CQD,G;;KAAAA,G;AA+CT,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [Movies, setFetchMovie] = useState([]);\n  const [isloading, setIsLoading] = useState(false);\n  // we can use the async and await way to achieve the same .then method\n  // async function fetchMovieHandler() {\n  //   const response = await fetch(\"https://swapi.dev/api/films\");\n  //   const data = await response.json();\n  //   const transformedMovies = data.results.map((filmData) => {\n  //     return {\n  //       id: filmData.episode_id,\n  //       openingText: filmData.opening_crawl,\n  //       title: filmData.title,\n  //       releaseDate: filmData.release_date,\n  //     };\n  //   });\n  // }\n  function fetchMovieHandler() {\n    setIsLoading(true);\n    fetch(\"https://swapi.dev/api/films\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        const transformedMovies = data.results.map((filmData) => {\n          return {\n            id: filmData.episode_id,\n            openingText: filmData.opening_crawl,\n            title: filmData.title,\n            releaseDate: filmData.release_date,\n          };\n        });\n        setFetchMovie(transformedMovies);\n        setIsLoading(false);\n      });\n  }\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}> Fetch Movies </button>\n      </section>\n      <section>\n        <MoviesList movies={Movies} />\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}