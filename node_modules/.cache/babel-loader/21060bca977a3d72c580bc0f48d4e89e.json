{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\React\\\\warStarAPI\\\\warStarAPI\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [Movies, setFetchMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // we can use the async and await way to achieve the same .then method\n\n  async function fetchMovieHandler() {\n    const response = await fetch(\"https://swapi.dev/api/films\");\n    setIsLoading(true);\n    const data = await response.json();\n    const transformedMovies = data.results.map(filmData => {\n      return {\n        id: filmData.episode_id,\n        openingText: filmData.opening_crawl,\n        title: filmData.title,\n        releaseDate: filmData.release_date\n      };\n    });\n    setFetchMovie(transformedMovies);\n    setIsLoading(false);\n  } /////////////////////////\n  // function fetchMovieHandler() {\n  //   setIsLoading(true);\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       const transformedMovies = data.results.map((filmData) => {\n  //         return {\n  //           id: filmData.episode_id,\n  //           openingText: filmData.opening_crawl,\n  //           title: filmData.title,\n  //           releaseDate: filmData.release_date,\n  //         };\n  //       });\n  //       setFetchMovie(transformedMovies);\n  //     });\n  //   setIsLoading(false);\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchMovieHandler,\n        children: \" Fetch Movies \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!isLoading ? /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: Movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 56\n      }, this), Movies.length <= 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Movies to show...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 31\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"qCYOroy6LXfb7dFhlvZtyePI4DI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Programming/React/warStarAPI/warStarAPI/src/App.js"],"names":["React","useState","MoviesList","App","Movies","setFetchMovie","isLoading","setIsLoading","fetchMovieHandler","response","fetch","data","json","transformedMovies","results","map","filmData","id","episode_id","openingText","opening_crawl","title","releaseDate","release_date","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,MAAD,EAASC,aAAT,IAA0BJ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C,CAFa,CAGb;;AACA,iBAAeO,iBAAf,GAAmC;AACjC,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAA5B;AACAH,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,UAAMC,iBAAiB,GAAGF,IAAI,CAACG,OAAL,CAAaC,GAAb,CAAkBC,QAAD,IAAc;AACvD,aAAO;AACLC,QAAAA,EAAE,EAAED,QAAQ,CAACE,UADR;AAELC,QAAAA,WAAW,EAAEH,QAAQ,CAACI,aAFjB;AAGLC,QAAAA,KAAK,EAAEL,QAAQ,CAACK,KAHX;AAILC,QAAAA,WAAW,EAAEN,QAAQ,CAACO;AAJjB,OAAP;AAMD,KAPyB,CAA1B;AAQAlB,IAAAA,aAAa,CAACQ,iBAAD,CAAb;AACAN,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAlBY,CAmBb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,iBACG,CAACF,SAAD,gBAAa,QAAC,UAAD;AAAY,QAAA,MAAM,EAAEF;AAApB;AAAA;AAAA;AAAA;AAAA,cAAb,gBAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADjD,EAEGA,MAAM,CAACoB,MAAP,IAAiB,CAAjB,gBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAArB,GAAmD,EAFtD;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAlDQrB,G;;KAAAA,G;AAoDT,eAAeA,GAAf","sourcesContent":["import React, { useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [Movies, setFetchMovie] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  // we can use the async and await way to achieve the same .then method\n  async function fetchMovieHandler() {\n    const response = await fetch(\"https://swapi.dev/api/films\");\n    setIsLoading(true);\n    const data = await response.json();\n    const transformedMovies = data.results.map((filmData) => {\n      return {\n        id: filmData.episode_id,\n        openingText: filmData.opening_crawl,\n        title: filmData.title,\n        releaseDate: filmData.release_date,\n      };\n    });\n    setFetchMovie(transformedMovies);\n    setIsLoading(false);\n  }\n  /////////////////////////\n  // function fetchMovieHandler() {\n  //   setIsLoading(true);\n  //   fetch(\"https://swapi.dev/api/films\")\n  //     .then((response) => {\n  //       return response.json();\n  //     })\n  //     .then((data) => {\n  //       const transformedMovies = data.results.map((filmData) => {\n  //         return {\n  //           id: filmData.episode_id,\n  //           openingText: filmData.opening_crawl,\n  //           title: filmData.title,\n  //           releaseDate: filmData.release_date,\n  //         };\n  //       });\n  //       setFetchMovie(transformedMovies);\n  //     });\n  //   setIsLoading(false);\n  // }\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}> Fetch Movies </button>\n      </section>\n      <section>\n        {!isLoading ? <MoviesList movies={Movies} /> : <p>Loading...</p>}\n        {Movies.length <= 0 ? <p>No Movies to show...</p> : \"\"}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}